function [Dout] = gazdag(Din,v,nx,nz,nt,dx,dz,dt,conj,S,ARG) 
%GAZDAG: Constant velocity migration using Gazdag method
%
%  Gazdag migration in contant velocity media 
%
%  [Dout] = gazdag(Din,v,nx,nz,nt,dx,dz,dt,conj,S,ARG) 
%
%  IN    Migration mode:
%        conj = 0 
%        Din(nt,nx): the poststack data
%        Modeling mode:
%        conj = 1
%        Din(nz,nx): image of the subsurface        
%        in both cases
%        dx,dx: image grid size in meters
%        dt: sampling interval in secs
%        ARG: wavenumbers (generated by propagator.m)
%        S: phase shift operator (generated by propagator.m)
%        
%  OUT   Modeling mode:
%        conj = 1
%        Dout(nt,nx): data
%        Migration mode:
%        conj = 0
%        Dout(nz,nx): migrated image
%
%  This code needs input variables S ad ARG that
%  generated by propagator.m. Note that propagator.m
%  computes the downward and the upward operator choose
%  one according to variable conj.
%
%
%  NOTE: Columns of D are traces
%
%  Example:
%
%  nt = 200; nx=60;
%  D = flat(nt,nx,40,0.004,0.1); D_f = fx(D,10,0.01,2,120,0.004,1;
%  subplot(211); wigb(D);   title('Before FX filtering')
%  subplot(212); wigb(D_f); title('After FX filtering')
%
%
%  SeismicLab
%  Version 1
%
%  written by M.D.Sacchi, and H. Kuehl, last modified April/2001 
%  sacchi@phys.ualberta.ca
%


if1=2;
if2=floor(40.*(nt*dt))+1;
n1 = if1;     n2 = if2;
n3 = nt-n2+2; n4=nt-n1+2;

Band = zeros(1,nt);
Band(1,n1:n2) = 1;
Band(1,n3:n4) = 1;

 tc = (nt-1)*dt;

% Migration 

 sumv = ones(1,nt);
 sumv = Band;

if conj==0;

 FFTD=fft2(Din); 
 IMAGE = zeros(nz,nx); 
 
 for iz=1 : nz
  FFTD = FFTD.*S;
   aperture = ones(nt,nx);
   t0 = (iz-1)*dz/v;
   index=find(ARG <= (t0/tc)^2);
   aperture(index) = 0.0; 
  IMAGE(iz,:) = sumv*(aperture.*FFTD/nt);
 end
 Dout=real(ifft(IMAGE,[],2)); 

end;

% Modeling 

spray = ones(nt,1);
spray = Band';

if conj==1;
  IMAGE=fft(Din,[],2);
  FFTD = zeros(nt,nx);
  for iz=nz:-1:1
   aperture = ones(nt,nx);
   t0 = (iz-1)*dz/v;
   index=find(ARG <= (t0/tc)^2+.1);
   aperture(index) = 0.0;
  FFTD = FFTD+aperture.*(spray*IMAGE(iz,:));
  FFTD = FFTD.*S;  
  end
 Dout=real(ifft2(FFTD));
end;

return;
